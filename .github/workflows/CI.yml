# This file is autogenerated by maturin v1.4.0
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, x86, aarch64, armv7, ppc64le] # s390x
        python-version: ['3.10', '3.14t']
        exclude:
          # Only build 3.14t for x86_64, aarch64 and armv7
          - target: x86
            python-version: '3.14t'
          - target: ppc64le
            python-version: '3.14t'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
      - name: Set PYTHON_GIL for free-threaded
        if: endsWith(matrix.python-version, 't')
        run: echo "PYTHON_GIL=0" >> "$GITHUB_ENV"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist ${{ endsWith(matrix.python-version, 't') && '-i python3.14t' || '' }}
          sccache: 'true'
          manylinux: auto
          working-directory: pyrsca
          before-script-linux: |
            # If we're running on rhel centos, install needed packages.
            if command -v yum &> /dev/null; then
                yum update -y && yum install -y perl-core openssl openssl-devel pkgconfig libatomic

                # If we're running on i686 we need to symlink libatomic
                # in order to build openssl with -latomic flag.
                if [[ ! -d "/usr/lib64" ]]; then
                    ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
                fi
            else
                # If we're running on debian-based system.
                apt update -y && apt-get install -y libssl-dev openssl pkg-config
            fi
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}-${{ matrix.python-version }}
          path: pyrsca/dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
        python-version: ['3.10', '3.14t']
        exclude:
          # Only build 3.14t for x64
          - target: x86
            python-version: '3.14t'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
          allow-prereleases: true
      - name: Set PYTHON_GIL for free-threaded
        if: endsWith(matrix.python-version, 't')
        run: echo "PYTHON_GIL=0" >> "$env:GITHUB_ENV"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist ${{ endsWith(matrix.python-version, 't') && '-i python3.14t' || '' }}
          sccache: 'true'
          working-directory: pyrsca
        env:
          OPENSSL_STATIC: 1
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}-${{ matrix.python-version }}
          path: pyrsca/dist

  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
        python-version: ['3.10', '3.14t']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
      - name: Set PYTHON_GIL for free-threaded
        if: endsWith(matrix.python-version, 't')
        run: echo "PYTHON_GIL=0" >> "$GITHUB_ENV"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist ${{ endsWith(matrix.python-version, 't') && '-i python3.14t' || '' }}
          sccache: 'true'
          working-directory: pyrsca
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}-${{ matrix.python-version }}
          path: pyrsca/dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          working-directory: pyrsca
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: pyrsca/dist

  # test-python314:
  #   name: Test Python 3.14
  #   runs-on: ubuntu-latest
  #   needs: [linux]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.14'
  #     - name: Download wheels
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: wheels-linux-x86_64-3.10
  #         path: dist
  #     - name: Install wheel
  #       run: |
  #         pip install dist/*.whl
  #     - name: Install test dependencies
  #       run: |
  #         pip install pytest pytest-dotenv
  #     - name: Copy tests to temp directory
  #       run: |
  #         cp -r pyrsca/tests /tmp/tests
  #         cp pyrsca/.env.template /tmp/.env || true
  #     - name: Run tests
  #       working-directory: /tmp
  #       run: |
  #         pytest tests/

  # test-python314t:
  #   name: Test Python 3.14t (Free-threaded)
  #   runs-on: ubuntu-latest
  #   needs: [linux]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.14t'
  #         allow-prereleases: true
  #     - name: Set PYTHON_GIL
  #       run: echo "PYTHON_GIL=0" >> "$GITHUB_ENV"
  #     - name: Verify free-threaded mode
  #       run: |
  #         python --version --version
  #         python -c "import sys; print(f'GIL enabled: {sys._is_gil_enabled()}')"
  #     - name: Download wheels
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: wheels-linux-x86_64-3.14t
  #         path: dist
  #     - name: Install wheel
  #       run: |
  #         pip install dist/*.whl
  #     - name: Install test dependencies
  #       run: |
  #         pip install pytest pytest-dotenv
  #     - name: Copy tests to temp directory
  #       run: |
  #         cp -r pyrsca/tests /tmp/tests
  #         cp pyrsca/.env.template /tmp/.env || true
  #     - name: Run tests
  #       working-directory: /tmp
  #       run: |
  #         pytest tests/

  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [linux, windows, macos, sdist]
    steps:
      - uses: actions/download-artifact@v4
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing */*.whl */*.tar.gz